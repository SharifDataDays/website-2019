# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2019-01-30 07:39
from __future__ import unicode_literals

import apps.game.models.challenge
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('description', models.CharField(max_length=2048)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('registration_start_time', models.DateTimeField()),
                ('registration_end_time', models.DateTimeField()),
                ('registration_open', models.BooleanField()),
                ('team_size', models.IntegerField()),
                ('entrance_price', models.IntegerField()),
                ('is_submission_open', models.BooleanField(default=False)),
                ('scoreboard_freeze_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, null=True)),
                ('tag', models.CharField(max_length=128, null=True)),
                ('trial_duration', models.IntegerField(null=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('scoreboard_freeze_time', models.DateTimeField(blank=True, null=True)),
                ('current_trial_id', models.IntegerField(default=0)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions', to='game.Challenge')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('infra_token', models.CharField(max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=200)),
                ('app', models.CharField(max_length=200)),
                ('level', models.CharField(choices=[('difficult', 'difficult'), ('medium', 'medium'), ('easy', 'easy')], max_length=200)),
                ('number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PhaseInstructionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phase', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='game.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stmt', models.CharField(max_length=500)),
                ('value', models.CharField(blank=True, max_length=200, null=True)),
                ('correct_answer', models.CharField(max_length=200)),
                ('score', models.FloatField(default=0, null=True)),
                ('type', models.CharField(blank=True, choices=[('multiple_choice', 'multiple_choice'), ('single_answer', 'single_answer'), ('multiple_answer', 'multiple_answer'), ('single_sufficient_answer', 'single_sufficient_answer'), ('single_number', 'single_number'), ('interval_number', 'interval_number'), ('file_upload', 'file_upload')], max_length=200)),
                ('ui_type', models.CharField(blank=True, choices=[('text_number', 'text_number'), ('text_string', 'text_string'), ('choices', 'choices'), ('multiple', 'multiple'), ('file', 'file')], max_length=200)),
                ('level', models.CharField(blank=True, choices=[('difficult', 'difficult'), ('medium', 'medium'), ('easy', 'easy')], max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamParticipatesChallenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='game.Challenge')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='accounts.Team')),
            ],
            options={
                'verbose_name_plural': 'Team Participates In Challenges',
            },
        ),
        migrations.CreateModel(
            name='TeamSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=apps.game.models.challenge.get_submission_file_directory)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('is_final', models.BooleanField(default=False)),
                ('language', models.CharField(choices=[('cpp', 'C++'), ('java', 'Java'), ('py3', 'Python 3')], default='java', max_length=128)),
                ('status', models.CharField(choices=[('uploading', 'Uploading'), ('uploaded', 'Uploaded'), ('compiling', 'Compiling'), ('compiled', 'Compiled'), ('failed', 'Failed')], default='uploading', max_length=128)),
                ('infra_compile_message', models.CharField(blank=True, max_length=1023, null=True)),
                ('infra_token', models.CharField(blank=True, max_length=256, null=True, unique=True)),
                ('infra_compile_token', models.CharField(blank=True, max_length=256, null=True, unique=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='game.TeamParticipatesChallenge')),
            ],
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('submit_time', models.DateTimeField(null=True)),
                ('score', models.FloatField(default=0)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='UserAcceptsTeamInChallenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_acceptance', to='game.TeamParticipatesChallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accepted_teams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FileUploadQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='game.Question')),
                ('download_url', models.CharField(max_length=200)),
                ('upload_url', models.CharField(max_length=200)),
            ],
            bases=('game.question',),
        ),
        migrations.CreateModel(
            name='IntervalQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='game.Question')),
                ('min_range', models.FloatField()),
                ('max_range', models.FloatField()),
            ],
            bases=('game.question',),
        ),
        migrations.CreateModel(
            name='MultipleAnswerQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='game.Question')),
            ],
            bases=('game.question',),
        ),
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='game.Question')),
            ],
            bases=('game.question',),
        ),
        migrations.AddField(
            model_name='trial',
            name='questions',
            field=models.ManyToManyField(blank=True, to='game.Question'),
        ),
        migrations.AddField(
            model_name='trial',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trials', to='game.TeamParticipatesChallenge'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='phase_instruction_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.PhaseInstructionSet'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.Game'),
        ),
        migrations.AlterUniqueTogether(
            name='useracceptsteaminchallenge',
            unique_together=set([('team', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='teamparticipateschallenge',
            unique_together=set([('team', 'challenge')]),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='game.MultipleChoiceQuestion'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.MultipleAnswerQuestion'),
        ),
    ]
